# -*- coding: utf-8 -*-
"""breast_cancer_RF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PTFDRy31Yi2Q8rTYmLEvwdlNcy0HGnex
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from sklearn.datasets import load_breast_cancer
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

breast_cancer = load_breast_cancer()
df = pd.DataFrame(breast_cancer.data, columns=breast_cancer.feature_names)
print(df.head())
X = breast_cancer.data
y = breast_cancer.target
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25)

# obiekt klasyfikatora – liczba drzew = 10
clf = RandomForestClassifier(n_estimators=10)
clf.fit(X_train, y_train) # trenowanie klasyfikatora
y_pred = clf.predict(X_test)

# dokładność dla zbioru testowego
print('\nAccuracy (test):',metrics.accuracy_score(y_test, y_pred))

# Walidacja krzyżowa
classes = breast_cancer.target_names[clf.predict(X_test)]
names = breast_cancer.target_names[y_test]
print('\n', pd.crosstab(names, classes, rownames=['Actual'], colnames=['Predicted']))

# Badanie istotności cech
print('\nFeature importances') 
for name, importance in zip(breast_cancer["feature_names"], clf.feature_importances_):
 print(name, "=", importance)
print('\n')
importances = pd.Series(clf.feature_importances_, index=df.columns)
importances.nlargest(4).plot(kind='barh')
plt.xlabel('Relative Importance')
plt.show()

# Raport z klasyfikacj
print(classification_report(y_test,y_pred))

print('\nPredicted class probabilities')
print(clf.predict_proba(X_test[0:10]))